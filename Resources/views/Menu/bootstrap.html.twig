{% extends "knp_menu.html.twig" %}
{% block item %}
    {% if item.displayed and not item.extra("pageTree:hidden", false) %}
        {# Extension OAGM Bootstrap: only show items up to level 2 (bootstrap doesn't support sub-dropdowns) and when there are children #}
        {%- set hasChildren = pageTreeBootstrapMenu_hasChildren(item) %}
        {# building the class of the item #}
        {%- set classes = item.attribute('class') is not empty ? [item.attribute('class')] : [] %}
        {%- if matcher.isCurrent(item) %}
            {%- set classes = classes|merge([options.currentClass]) %}
        {%- elseif matcher.isAncestor(item, options.depth) %}
            {%- set classes = classes|merge([options.ancestorClass]) %}
        {%- endif %}

        {# Extension OAGM Bootstrap: add "dropdown" class to li, if there is a submenu #}
        {% if hasChildren %}
            {%- set classes = classes|merge(["dropdown"]) %}
        {% endif %}

        {%- set attributes = item.attributes %}
        {%- if classes is not empty %}
            {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
        {%- endif %}
        {# displaying the item #}
        {% import "knp_menu.html.twig" as knp_menu %}
        <li{{ knp_menu.attributes(attributes) }}>
            {%- set linkAttributes = item.linkAttributes %}

            {% if hasChildren %}
                {%- set linkClasses    = linkAttributes.class is defined ? linkAttributes.class : "" %}
                {%- set linkClasses    = "#{linkClasses} dropdown-toggle"|trim %}
                {%- set linkAttributes = linkAttributes|merge({"data-toggle": "dropdown", class: linkClasses}) %}
            {% endif %}

            {%- if item.uri is not empty and (not matcher.isCurrent(item) or options.currentAsLink) %}
                {{ block('linkElement') }}
            {%- else %}
                {{ block('spanElement') }}
            {%- endif %}

            {# Extension OAGM Bootstrap: add "dropdown-menu" class to child ul #}
            {% if hasChildren %}
                {# render the list of children#}
                {%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
                {%- set childrenClasses = childrenClasses|merge(['menu_level_' ~ item.level]) %}
                {%- set childrenClasses = childrenClasses|merge(['dropdown-menu']) %}
                {%- set listAttributes = item.childrenAttributes|merge({'class': childrenClasses|join(' ') }) %}
                {{ block('list') }}
            {% endif %}
        </li>
    {% endif %}
{% endblock %}

{% block linkElement %}{% import "knp_menu.html.twig" as knp_menu %}<a href="{{ item.uri }}"{{ knp_menu.attributes(linkAttributes) }}>{{ block('label') }}{% if hasChildren %} <b class="caret"></b>{% endif %}</a>{% endblock %}